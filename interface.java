/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my.contacteditor;
import java.util.*;
import java.sql.*;
import javax.swing.JOptionPane;
/**
 *
 * @author Everett
 */
public class ContactEditorUI extends javax.swing.JFrame {

    /**
     * Creates new form ContactEditorUI
     */
    public ContactEditorUI() {
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dropdownBoxCriteria = new javax.swing.JComboBox<>();
        categoryLabel = new javax.swing.JLabel();
        welcomeText = new javax.swing.JLabel();
        userinput = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        albumTitleLabel = new javax.swing.JLabel();
        yearLabel = new javax.swing.JLabel();
        songTitleLabel = new javax.swing.JLabel();
        albumRankLabel = new javax.swing.JLabel();
        labelLabel = new javax.swing.JLabel();
        genreLabel = new javax.swing.JLabel();
        songLengthLabel = new javax.swing.JLabel();
        artistFNameLabel = new javax.swing.JLabel();
        artistLNameLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        albumTitleOut = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        yearOut = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        artistFNameOut = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        artistLNameOut = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        rankOut = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        labelOut = new javax.swing.JTextArea();
        instructions = new javax.swing.JLabel();
        lastName = new javax.swing.JTextField();
        instructions2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        dropdownBoxCriteria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "albumByArtist", "albumByRank", "albumByYear", "artistByGenre", "artistsByLabel", "songByArtist", "songsByGenre", "songsByTitle" }));
        dropdownBoxCriteria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dropdownBoxCriteriaActionPerformed(evt);
            }
        });

        categoryLabel.setText("Category:");

        welcomeText.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        welcomeText.setText("Welcome to Narwhal Music");

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        albumTitleLabel.setText("Album Title or");

        yearLabel.setText("Year");

        songTitleLabel.setText("Song Title");

        albumRankLabel.setText("Album Rank");

        labelLabel.setText("Label or");

        genreLabel.setText("Genre");

        songLengthLabel.setText("Song Length or");

        artistFNameLabel.setText("Artist First Name");

        artistLNameLabel.setText("Artist Last Name (if applicable)");

        albumTitleOut.setEditable(false);
        albumTitleOut.setColumns(20);
        albumTitleOut.setRows(5);
        jScrollPane1.setViewportView(albumTitleOut);

        yearOut.setEditable(false);
        yearOut.setColumns(20);
        yearOut.setRows(5);
        jScrollPane2.setViewportView(yearOut);

        artistFNameOut.setEditable(false);
        artistFNameOut.setColumns(20);
        artistFNameOut.setRows(5);
        jScrollPane3.setViewportView(artistFNameOut);

        artistLNameOut.setEditable(false);
        artistLNameOut.setColumns(20);
        artistLNameOut.setRows(5);
        jScrollPane4.setViewportView(artistLNameOut);

        rankOut.setEditable(false);
        rankOut.setColumns(20);
        rankOut.setRows(5);
        jScrollPane5.setViewportView(rankOut);

        labelOut.setEditable(false);
        labelOut.setColumns(20);
        labelOut.setRows(5);
        jScrollPane6.setViewportView(labelOut);

        instructions.setText("Choose a category");

        instructions2.setText("Enter last name below (only for songByArtist and albumByArtist):");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/contacteditor/photo.jpg"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(welcomeText, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dropdownBoxCriteria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(categoryLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(instructions2)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lastName, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(userinput, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchButton))
                                    .addComponent(instructions, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(songTitleLabel))
                                        .addGap(105, 105, 105)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(albumRankLabel, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(artistFNameLabel, javax.swing.GroupLayout.Alignment.LEADING)))
                                    .addComponent(yearLabel))
                                .addGap(106, 106, 106)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelLabel)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(artistLNameLabel)
                                    .addComponent(genreLabel)))
                            .addComponent(songLengthLabel)
                            .addComponent(albumTitleLabel))
                        .addGap(0, 84, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(welcomeText, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(categoryLabel)
                            .addComponent(instructions))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dropdownBoxCriteria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(userinput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchButton))
                        .addGap(27, 27, 27))
                    .addComponent(instructions2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(albumTitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(artistLNameLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(artistFNameLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(songTitleLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(songLengthLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(yearLabel)
                        .addComponent(albumRankLabel))
                    .addComponent(genreLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(54, 54, 54))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void dropdownBoxCriteriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dropdownBoxCriteriaActionPerformed
 
        String selectedOption = (String) dropdownBoxCriteria.getSelectedItem();
        if (selectedOption.equals("albumByArtist")) {
            //takes in artist name
            //outputs album title, year 
            instructions.setText("Enter first name below:");
            userinput.setText("");
            lastName.setText("");
            albumTitleOut.setText("");
            artistFNameOut.setText("");
            artistLNameOut.setText("");
            yearOut.setText("");
            rankOut.setText("");
            labelOut.setText("");
        } if (selectedOption.equals("albumByRank")) {
            //takes in album sales (diamond, platinum, gold)
            //outputs album title, year, first name, and number/rank
            instructions.setText("Enter album rank (Gold, Platinum, or Diamond) below:");  
            userinput.setText("");
            lastName.setText("");
            albumTitleOut.setText("");
            artistFNameOut.setText("");
            artistLNameOut.setText("");
            yearOut.setText("");
            rankOut.setText("");
            labelOut.setText("");
        } if (selectedOption.equals("albumByYear")) {
            //takes in year
            //outputs album title, first name
            instructions.setText("Enter year of album below:");
            userinput.setText("");
            lastName.setText("");
            albumTitleOut.setText("");
            artistFNameOut.setText("");
            artistLNameOut.setText("");
            yearOut.setText("");
            rankOut.setText("");
            labelOut.setText("");
        } if (selectedOption.equals("artistByGenre")) {
            //takes in genre
            //outputs first name
            instructions.setText("Enter the genre below:");
            userinput.setText("");
            lastName.setText("");
            albumTitleOut.setText("");
            artistFNameOut.setText("");
            artistLNameOut.setText("");
            yearOut.setText("");
            rankOut.setText("");
            labelOut.setText("");
        } if (selectedOption.equals("artistsByLabel")) {
            //takes in label name
            //outputs all artist name, fname, lname in that label
            instructions.setText("Enter the label name below:");
            userinput.setText("");
            lastName.setText("");
            albumTitleOut.setText("");
            artistFNameOut.setText("");
            artistLNameOut.setText("");
            yearOut.setText("");
            rankOut.setText("");
            labelOut.setText("");
        } if (selectedOption.equals("songByArtist")) {
            //takes in artist name fname and lname
            //outputs all songs by artist (title, artist name, genre, length
            instructions.setText("Enter artist name below:");
            userinput.setText("");
            lastName.setText("");
            albumTitleOut.setText("");
            artistFNameOut.setText("");
            artistLNameOut.setText("");
            yearOut.setText("");
            rankOut.setText("");
            labelOut.setText("");
        } if (selectedOption.equals("songsByGenre")) {
            //takes in genre
            //outputs song title, artist first name, length of song
            instructions.setText("Enter the genre below:");  
            userinput.setText("");
            lastName.setText("");
            albumTitleOut.setText("");
            artistFNameOut.setText("");
            artistLNameOut.setText("");
            yearOut.setText("");
            rankOut.setText("");
            labelOut.setText("");
        } if (selectedOption.equals("songsByTitle")) {
            //takes in song title
            //outputs title, fname, genre, duration
            instructions.setText("Enter the song title below:");
            userinput.setText("");
            lastName.setText("");
            albumTitleOut.setText("");
            artistFNameOut.setText("");
            artistLNameOut.setText("");
            yearOut.setText("");
            rankOut.setText("");
            labelOut.setText("");
        }
    }//GEN-LAST:event_dropdownBoxCriteriaActionPerformed
    
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        String selectedOption = (String) dropdownBoxCriteria.getSelectedItem();
        
        
        if (selectedOption.equals("albumByArtist")) {
            albumTitleOut.setText(""); //clearing text boxes on every new search 
            yearOut.setText("");           
            String input = userinput.getText();
            String input2 = lastName.getText();
            Connection conn = null;
            Statement stmt = null;
            ResultSet rs = null;
            PreparedStatement prep = null;
            CallableStatement cStmt = null;

            try {
                conn = DriverManager.getConnection("jdbc:mysql://localhost/narwhal_music?"
                        + "user=cpsc408&password=FY17cpsc408&useSSL=false");
                conn.setAutoCommit(false);

                String selectQuery = "{call albumByArtist(?,?)}";
                
                cStmt = conn.prepareCall(selectQuery);
                cStmt.setString(1, input);
                cStmt.setString(2, input2);

                rs = cStmt.executeQuery();

                String titleOutput = "";
                int yearOutput = 0;

                while (rs.next()) {
                    titleOutput = rs.getString("title");
                    yearOutput = rs.getInt("year");
                    String output3 = Integer.toString(yearOutput);

                    albumTitleOut.append(titleOutput + ",\n"); //appending info to the text boxes 
                    yearOut.append(output3 + ",\n");
                }
                conn.commit();

            } catch (SQLException ex) {
                // Handle any SQL errors.
                System.out.println("SQLException: " + ex.getMessage());
                System.out.println("SQLState: " + ex.getSQLState());
                System.out.println("VendorError: " + ex.getErrorCode());

            } finally {
                // Close the result set handle.
                if (rs != null) {
                    try {
                        rs.close();
                    } catch (SQLException ex) {
                        /* Ignore. */ }
                    rs = null;
                }
                // Close the statement handle.
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException ex) {
                        /* Ignore. */ }
                    stmt = null;
                }
                // Close the connection handle.
                if (conn != null) {
                    try {
                        conn.close();
                    } catch (SQLException ex) {
                        /* Ignore. */ }
                    conn = null;
                }
            }
        } else if (selectedOption.equals("albumByRank")) { 
            //takes in album sales (diamond, platinum, gold)
            //outputs album title, year, first name, and number/rank
            albumTitleOut.setText(""); //clearing text boxes on every new search 
            yearOut.setText("");
            rankOut.setText("");
            artistFNameOut.setText("");
            String input = userinput.getText();
            Connection conn = null;
            Statement stmt = null;
            ResultSet rs = null;
            PreparedStatement prep = null;
            CallableStatement cStmt = null;

            try {
                conn = DriverManager.getConnection("jdbc:mysql://localhost/narwhal_music?"
                        + "user=cpsc408&password=FY17cpsc408&useSSL=false");
                conn.setAutoCommit(false);

                String selectQuery = "{call albumByRank(?)}";

                cStmt = conn.prepareCall(selectQuery);
                cStmt.setString(1, input);

                rs = cStmt.executeQuery();

                String titleOutput = "";
                int yearOutput = 0;
                String nameOutput = "";
                int rankOutput = 0;

                while (rs.next()) {
                    titleOutput = rs.getString("title"); 
                    yearOutput = rs.getInt("year");
                    String output3 = Integer.toString(yearOutput);
                    nameOutput = rs.getString("fname");
                    rankOutput = rs.getInt("number");
                    String output4 = Integer.toString(rankOutput);

                    albumTitleOut.append(titleOutput + ",\n"); //appending info to the text boxes 
                    yearOut.append(output3 + ",\n");
                    artistFNameOut.append(nameOutput + ",\n");
                    rankOut.append(output4 + ",\n");
                }
                conn.commit();

            } catch (SQLException ex) {
                // Handle any SQL errors.
                System.out.println("SQLException: " + ex.getMessage());
                System.out.println("SQLState: " + ex.getSQLState());
                System.out.println("VendorError: " + ex.getErrorCode());

            } finally {
                // Close the result set handle.
                if (rs != null) {
                    try {
                        rs.close();
                    } catch (SQLException ex) {
                        /* Ignore. */ }
                    rs = null;
                }
                // Close the statement handle.
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException ex) {
                        /* Ignore. */ }
                    stmt = null;
                }
                // Close the connection handle.
                if (conn != null) {
                    try {
                        conn.close();
                    } catch (SQLException ex) {
                        /* Ignore. */ }
                    conn = null;
                }
            }
        } else if (selectedOption.equals("albumByYear")) {
            //takes in year
            //outputs album title, artist first name
            albumTitleOut.setText("");
            artistFNameOut.setText("");
            String input = userinput.getText();
            int inputInt = Integer.parseInt(input);
            Connection conn = null;
            Statement stmt = null;
            ResultSet rs = null;
            PreparedStatement prep = null;
            CallableStatement cStmt = null;

            try {
                conn = DriverManager.getConnection("jdbc:mysql://localhost/narwhal_music?"
                        + "user=cpsc408&password=FY17cpsc408&useSSL=false");
                conn.setAutoCommit(false);

                String selectQuery = "{call albumByYear(?)}";

                cStmt = conn.prepareCall(selectQuery);
                cStmt.setInt(1, inputInt);

                rs = cStmt.executeQuery();

                String albumTitleOutput = "";
                String artistOutput = "";

                while (rs.next()) {
                    albumTitleOutput = rs.getString("title");
                    artistOutput = rs.getString("fname");               

                    albumTitleOut.append(albumTitleOutput + ",\n");
                    artistFNameOut.append(artistOutput + ",\n");
                }
                conn.commit();

            } catch (SQLException ex) {
                // Handle any SQL errors.
                System.out.println("SQLException: " + ex.getMessage());
                System.out.println("SQLState: " + ex.getSQLState());
                System.out.println("VendorError: " + ex.getErrorCode());

            } finally {
                // Close the result set handle.
                if (rs != null) {
                    try {
                        rs.close();
                    } catch (SQLException ex) {
                        /* Ignore. */ }
                    rs = null;
                }
                // Close the statement handle.
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException ex) {
                        /* Ignore. */ }
                    stmt = null;
                }
                // Close the connection handle.
                if (conn != null) {
                    try {
                        conn.close();
                    } catch (SQLException ex) {
                        /* Ignore. */ }
                    conn = null;
                }
            }
        } else if (selectedOption.equals("artistByGenre")) {
            //takes in genre
            //outputs first name          
            artistFNameOut.setText("");
            artistLNameOut.setText("");
            String input = userinput.getText();
            Connection conn = null;
            Statement stmt = null;
            ResultSet rs = null;
            PreparedStatement prep = null;
            CallableStatement cStmt = null;

            try {
                conn = DriverManager.getConnection("jdbc:mysql://localhost/narwhal_music?"
                        + "user=cpsc408&password=FY17cpsc408&useSSL=false");
                conn.setAutoCommit(false);

                String selectQuery = "{call artistByGenre(?)}";

                cStmt = conn.prepareCall(selectQuery);
                cStmt.setString(1, input);

                rs = cStmt.executeQuery();

                String artistOutput = "";
                String artistOutput2 = "";

                while (rs.next()) {                  
                    artistOutput = rs.getString("fname"); 
                    artistOutput2 = rs.getString("lname");

                   
                    artistFNameOut.append(artistOutput + ",\n"); //current issue is that it prints out duplicate values 
                    artistLNameOut.append(artistOutput2 + ",\n");
                    
                    
                }
                conn.commit();

            } catch (SQLException ex) {
                // Handle any SQL errors.
                System.out.println("SQLException: " + ex.getMessage());
                System.out.println("SQLState: " + ex.getSQLState());
                System.out.println("VendorError: " + ex.getErrorCode());

            } finally {
                // Close the result set handle.
                if (rs != null) {
                    try {
                        rs.close();
                    } catch (SQLException ex) {
                        /* Ignore. */ }
                    rs = null;
                }
                // Close the statement handle.
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException ex) {
                        /* Ignore. */ }
                    stmt = null;
                }
                // Close the connection handle.
                if (conn != null) {
                    try {
                        conn.close();
                    } catch (SQLException ex) {
                        /* Ignore. */ }
                    conn = null;
                }
            }
        } else if (selectedOption.equals("artistsByLabel")) {
            //takes in label name
            //outputs all artist name, fname, lname in that label
            artistFNameOut.setText("");
            artistLNameOut.setText("");
            String input = userinput.getText();
            Connection conn = null;
            Statement stmt = null;
            ResultSet rs = null;
            PreparedStatement prep = null;
            CallableStatement cStmt = null;

            try {
                conn = DriverManager.getConnection("jdbc:mysql://localhost/narwhal_music?"
                        + "user=cpsc408&password=FY17cpsc408&useSSL=false");
                conn.setAutoCommit(false);

                String selectQuery = "{call artistsByLabel(?)}";

                cStmt = conn.prepareCall(selectQuery);
                cStmt.setString(1, input);

                rs = cStmt.executeQuery();

                String artistOutput = "";
                String artistOutput2 = "";

                while (rs.next()) {
                    artistOutput = rs.getString("fname");
                    artistOutput2 = rs.getString("lname");

                    artistFNameOut.append(artistOutput + ",\n");
                    artistLNameOut.append(artistOutput2 + ",\n");

                }
                conn.commit();

            } catch (SQLException ex) {
                // Handle any SQL errors.
                System.out.println("SQLException: " + ex.getMessage());
                System.out.println("SQLState: " + ex.getSQLState());
                System.out.println("VendorError: " + ex.getErrorCode());

            } finally {
                // Close the result set handle.
                if (rs != null) {
                    try {
                        rs.close();
                    } catch (SQLException ex) {
                        /* Ignore. */ }
                    rs = null;
                }
                // Close the statement handle.
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException ex) {
                        /* Ignore. */ }
                    stmt = null;
                }
                // Close the connection handle.
                if (conn != null) {
                    try {
                        conn.close();
                    } catch (SQLException ex) {
                        /* Ignore. */ }
                    conn = null;
                }
            }
        
        } else if (selectedOption.equals("songByArtist")) {
            //takes in artist name fname and lname
            //outputs all songs by artist (title, artist name, genre, length)
            albumTitleOut.setText(""); //clearing text boxes on every new search 
            artistFNameOut.setText("");
            labelOut.setText(""); //the genre box
            yearOut.setText(""); //the song duration box
            String input = userinput.getText();
            String input2 = lastName.getText();
            Connection conn = null;
            Statement stmt = null;
            ResultSet rs = null;
            PreparedStatement prep = null;
            CallableStatement cStmt = null;

            try {
                conn = DriverManager.getConnection("jdbc:mysql://localhost/narwhal_music?"
                        + "user=cpsc408&password=FY17cpsc408&useSSL=false");
                conn.setAutoCommit(false);

                String selectQuery = "{call songByArtist(?,?)}";

                cStmt = conn.prepareCall(selectQuery);
                cStmt.setString(1, input);
                cStmt.setString(2, input2);

                rs = cStmt.executeQuery();

                String titleOutput = "";
                String fname = "";
                String genre = "";
                String length = "";
                

                while (rs.next()) {
                    titleOutput = rs.getString("title"); 
                    fname = rs.getString("fname");

                    genre = rs.getString("genre");
                    length = rs.getString("duration");                  

                    albumTitleOut.append(titleOutput + ",\n"); //appending info to the text boxes 
                    artistFNameOut.append(fname + ",\n");
                    labelOut.append(genre + ",\n");
                    yearOut.append(length + ",\n");
                }
                conn.commit();

            } catch (SQLException ex) {
                // Handle any SQL errors.
                System.out.println("SQLException: " + ex.getMessage());
                System.out.println("SQLState: " + ex.getSQLState());
                System.out.println("VendorError: " + ex.getErrorCode());

            } finally {
                // Close the result set handle.
                if (rs != null) {
                    try {
                        rs.close();
                    } catch (SQLException ex) {
                        /* Ignore. */ }
                    rs = null;
                }
                // Close the statement handle.
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException ex) {
                        /* Ignore. */ }
                    stmt = null;
                }
                // Close the connection handle.
                if (conn != null) {
                    try {
                        conn.close();
                    } catch (SQLException ex) {
                        /* Ignore. */ }
                    conn = null;
                }
            }
        } else if (selectedOption.equals("songsByGenre")) {
            //takes in genre
            //outputs song title, artist first name, length of song
            albumTitleOut.setText(""); //clearing text boxes on every new search 
            artistFNameOut.setText("");
            yearOut.setText(""); //the song duration box
            String input = userinput.getText();
            Connection conn = null;
            Statement stmt = null;
            ResultSet rs = null;
            PreparedStatement prep = null;
            CallableStatement cStmt = null;

            try {
                conn = DriverManager.getConnection("jdbc:mysql://localhost/narwhal_music?"
                        + "user=cpsc408&password=FY17cpsc408&useSSL=false");
                conn.setAutoCommit(false);

                String selectQuery = "{call songsByGenre(?)}";

                cStmt = conn.prepareCall(selectQuery);
                cStmt.setString(1, input);

                rs = cStmt.executeQuery();

                String titleOutput = "";
                String fname = "";
                String length = "";
                

                while (rs.next()) {
                    titleOutput = rs.getString("title"); 
                    fname = rs.getString("fname");                    
                    length = rs.getString("duration");                  

                    albumTitleOut.append(titleOutput + ",\n"); //appending info to the text boxes 
                    artistFNameOut.append(fname + ",\n");
                    yearOut.append(length + ",\n");
                }
                conn.commit();

            } catch (SQLException ex) {
                // Handle any SQL errors.
                System.out.println("SQLException: " + ex.getMessage());
                System.out.println("SQLState: " + ex.getSQLState());
                System.out.println("VendorError: " + ex.getErrorCode());

            } finally {
                // Close the result set handle.
                if (rs != null) {
                    try {
                        rs.close();
                    } catch (SQLException ex) {
                        /* Ignore. */ }
                    rs = null;
                }
                // Close the statement handle.
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException ex) {
                        /* Ignore. */ }
                    stmt = null;
                }
                // Close the connection handle.
                if (conn != null) {
                    try {
                        conn.close();
                    } catch (SQLException ex) {
                        /* Ignore. */ }
                    conn = null;
                }
            }
        } else if (selectedOption.equals("songsByTitle")) {
            //takes in song title
            //outputs title, fname, genre, duration
            albumTitleOut.setText(""); //clearing text boxes on every new search 
            artistFNameOut.setText("");
            labelOut.setText(""); //genre box
            yearOut.setText(""); //the song duration box
            String input = userinput.getText();
            Connection conn = null;
            Statement stmt = null;
            ResultSet rs = null;
            PreparedStatement prep = null;
            CallableStatement cStmt = null;

            try {
                conn = DriverManager.getConnection("jdbc:mysql://localhost/narwhal_music?"
                        + "user=cpsc408&password=FY17cpsc408&useSSL=false");
                conn.setAutoCommit(false);

                String selectQuery = "{call songsByTitle(?)}";

                cStmt = conn.prepareCall(selectQuery);
                cStmt.setString(1, input);

                rs = cStmt.executeQuery();

                String titleOutput = "";
                String fname = "";
                String genre = "";
                String length = "";
                

                while (rs.next()) {
                    titleOutput = rs.getString("title"); 
                    fname = rs.getString("fname");   
                    genre = rs.getString("genre");
                    length = rs.getString("duration");                  

                    albumTitleOut.append(titleOutput + ",\n"); //appending info to the text boxes 
                    artistFNameOut.append(fname + ",\n");
                    labelOut.append(genre + ",\n");
                    yearOut.append(length + ",\n");
                }
                conn.commit();

            } catch (SQLException ex) {
                // Handle any SQL errors.
                System.out.println("SQLException: " + ex.getMessage());
                System.out.println("SQLState: " + ex.getSQLState());
                System.out.println("VendorError: " + ex.getErrorCode());

            } finally {
                // Close the result set handle.
                if (rs != null) {
                    try {
                        rs.close();
                    } catch (SQLException ex) {
                        /* Ignore. */ }
                    rs = null;
                }
                // Close the statement handle.
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException ex) {
                        /* Ignore. */ }
                    stmt = null;
                }
                // Close the connection handle.
                if (conn != null) {
                    try {
                        conn.close();
                    } catch (SQLException ex) {
                        /* Ignore. */ }
                    conn = null;
                }
            }
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ContactEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ContactEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ContactEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ContactEditorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ContactEditorUI().setVisible(true);
            }
        });
        //</editor-fold>
        /* Create and display the form */
       
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel albumRankLabel;
    private javax.swing.JLabel albumTitleLabel;
    private javax.swing.JTextArea albumTitleOut;
    private javax.swing.JLabel artistFNameLabel;
    private javax.swing.JTextArea artistFNameOut;
    private javax.swing.JLabel artistLNameLabel;
    private javax.swing.JTextArea artistLNameOut;
    private javax.swing.JLabel categoryLabel;
    private javax.swing.JComboBox<String> dropdownBoxCriteria;
    private javax.swing.JLabel genreLabel;
    private javax.swing.JLabel instructions;
    private javax.swing.JLabel instructions2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel labelLabel;
    private javax.swing.JTextArea labelOut;
    private javax.swing.JTextField lastName;
    private javax.swing.JTextArea rankOut;
    private javax.swing.JButton searchButton;
    private javax.swing.JLabel songLengthLabel;
    private javax.swing.JLabel songTitleLabel;
    private javax.swing.JTextField userinput;
    private javax.swing.JLabel welcomeText;
    private javax.swing.JLabel yearLabel;
    private javax.swing.JTextArea yearOut;
    // End of variables declaration//GEN-END:variables
}
